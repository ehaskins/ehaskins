{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-02 Script - Constrained Delegation for Hyper-V Live Migrations/","webpackCompilationHash":"04c9b1c30955a8ce71b4","result":{"data":{"site":{"siteMetadata":{"title":"Eric Haskins","author":"Eric Haskins"}},"markdownRemark":{"id":"66657ce9-000c-5705-96a2-b63406a31af4","html":"<h1>Background</h1>\n<p>There are two options for Live Migration security in Hyper-V.</p>\n<ol>\n<li>\n<p>Credential Security Support Provider (CredSSP)</p>\n<ul>\n<li>No configuration</li>\n<li>Must login locally/RDP to origin host to initiate the transfer</li>\n</ul>\n</li>\n<li>\n<p>Kerberos</p>\n<ul>\n<li>Allows you to initiate the migration from any machine</li>\n<li>Requres you configure constrained delegation on between the hosts</li>\n</ul>\n</li>\n</ol>\n<p>It’s not a hard job to add the delegation for a pair of servers, but once you have a few it quickly becomes a pain. We’re going to write a little PowerShell script to setup constrained delegation between any number of hosts.</p>\n<h2>Resources</h2>\n<p><a href=\"https://technet.microsoft.com/en-us/library/jj134199.aspx\">TechNet Article on configuring Live Migration</a></p>\n<h1>What do we need to do?</h1>\n<p>I’ve enabled constrained delegation between two servers (<code class=\"language-text\">host</code> and <code class=\"language-text\">host2</code>) using Active Directory Users and Computers. We’ll use <code class=\"language-text\">host2</code> as the source, and <code class=\"language-text\">host</code> for the destination.</p>\n<p>Let’s see what kind of changes we see of the <code class=\"language-text\">host2</code>’s account after setting up constrained delegation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PS C:\\Users\\ehaskins&gt; Get-ADComputer host2 -Properties * | fc * -Depth 1\n\nclass ADComputer\n{\n  ...\n  DistinguishedName = CN=HOST2,OU=Servers,OU=IT,OU=EHNet,DC=ehnet,DC=ehaskins,D\n  C=net\n  DNSHostName = HOST2.ehnet.ehaskins.net\n  ...\n  msDS-AllowedToDelegateTo =\n    [\n      Microsoft Virtual System Migration Service/HOST.ehnet.ehaskins.net\n      Microsoft Virtual System Migration Service/HOST\n      cifs/HOST.ehnet.ehaskins.net\n      cifs/HOST\n    ]\n  ...\n  PropertyCount = 85\n}\nPS C:\\Users\\ehaskins&gt;</code></pre></div>\n<p>Looking through that output we can see what the constained delegation dialog is doing. It’s just adding items to <code class=\"language-text\">msDS-AllowedToDelegateTo</code> property of the source host. They seem to just be in the form of <code class=\"language-text\">service/machine</code>. For some reason it added both the qualified and unqualified names. I don’t know why, but we can replicate that behavior…</p>\n<p>I also figured out from experimenting that you can list a server in it’s own AllowedToDeledateTo list without breaking anything. That’s helpful since that means we can set all the hosts the same.</p>\n<h1>The plan</h1>\n<p>We need to:</p>\n<ol>\n<li>Create a list of values to put in <code class=\"language-text\">msDS-AllowedToDelegateTo</code></li>\n<li>Set the <code class=\"language-text\">msDS-AllowedToDelegateTo</code> property on each server</li>\n<li>We’re going to replace any existing content there, but could make this smarter in the future.</li>\n<li>Celebrate</li>\n</ol>\n<h2>Build the <code class=\"language-text\">msDS-AllowedToDelegateTo</code> list</h2>\n<p>We can do something list this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$domain = &#39;ehnet.ehaskins.net&#39;\n$servers = @(\n  &#39;host&#39;, \n  &#39;host2&#39;\n)\n\n$services = @(\n  &#39;Microsoft Virtual System Migration Service&#39;,\n  &#39;cifs&#39;\n)\n\n$allowDelgationTo = foreach ($server in $servers){\n    foreach ($service in $services){\n        &#39;{0}/{1}&#39; -f $service, $server\n        &#39;{0}/{1}.{2}&#39; -f $service, $server, $domain\n    }\n}\n\n$allowDelgationTo</code></pre></div>\n<p>When we run that we get this, which other than some capitalization differences looks a lot like the output from above. I think it’ll work.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Microsoft Virtual System Migration Service/host\nMicrosoft Virtual System Migration Service/host.ehnet.ehaskins.net\ncifs/host\ncifs/host.ehnet.ehaskins.net\nMicrosoft Virtual System Migration Service/host2\nMicrosoft Virtual System Migration Service/host2.ehnet.ehaskins.net\ncifs/host2\ncifs/host2.ehnet.ehaskins.net</code></pre></div>\n<h2>Write the value to AD</h2>\n<p>Normally we could just use <code class=\"language-text\">Set-AdComputer</code>, but unfortunately it doesn’t have a parameter to set this property. Instead, we’re going to use <code class=\"language-text\">Set-AdComputer -Instance</code> to save an object we’ve modified.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foreach ($server in $servers){\n    $acct = get-adcomputer host -Properties msDS-AllowedToDelegateTo\n\n    # Note we&#39;re putting the property name in quotes since in contains a &quot;-&quot; which is&#39;t allowed normally.\n    $acct.&quot;msDS-AllowedToDelegateTo&quot; = $allowDelgationTo\n    Set-ADComputer -Instance $acct\n}</code></pre></div>\n<h1>Completed Script</h1>\n<script src=\"https://gist.github.com/ehaskins/90302dc2356d28e724a1.js\"></script>","frontmatter":{"title":"Script - Constrained Delegation for Hyper-V Live Migrations","date":"September 02, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015-09-02 Script - Constrained Delegation for Hyper-V Live Migrations/"}}}